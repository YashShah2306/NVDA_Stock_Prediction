import yfinance as yf
import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA
import warnings

# Fetch historical data for NVIDIA
ticker = 'NVDA'
start_date = '2024-01-01'
end_date = '2025-03-23'
data = yf.download(ticker, start=start_date, end=end_date)

# Display the first few rows
print(data.tail())

from statsmodels.tsa.stattools import adfuller

# Extract closing prices
close_prices = data['Close']

# Check for stationarity
result = adfuller(close_prices.dropna())
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# If non-stationary, apply differencing
if result[1] > 0.05:
    close_prices_diff = close_prices.diff().dropna()
else:
    close_prices_diff = close_prices


warnings.filterwarnings('ignore')

# Fit ARIMA model
model = ARIMA(close_prices_diff, order=(1, 1, 1))
model_fit = model.fit()

# Model summary
print(model_fit.summary())

# Forecast the next 5 days
forecast_steps = 3
forecast = model_fit.forecast(steps=forecast_steps)

# Generate forecast dates
forecast_dates = pd.date_range(start='2025-03-16', periods=forecast_steps, freq='B')

# Create a DataFrame for the forecast
forecast_df = pd.DataFrame({'Date': forecast_dates, 'Forecasted_Close': forecast})
forecast_df.set_index('Date', inplace=True)
print(forecast_df)



# Load historical NVDA stock data
def get_historical_data():
    stock_data = yf.download('NVDA', start='2020-01-01', end='2025-03-07')
    return stock_data['Close']

# Train ARIMA model and predict next day's price
def predict_next_day_price(stock_data):
    model = ARIMA(stock_data, order=(5,1,0))  # Example parameters
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=5)
    return forecast

# Simulate trading strategy
def trading_agent(predictions, balance, shares):
    decision = "HOLD"
    if predictions.iloc[0] > predictions.iloc[-1]:
        decision = "SELL"
    elif predictions.iloc[0] < predictions.iloc[-1]:
        decision = "BUY"
    return decision

# Running the simulation
stock_prices = get_historical_data()
predictions = predict_next_day_price(stock_prices)
decision = trading_agent(predictions, 10000, 0)
print("Trading Decision:", decision)

# Load historical NVDA stock data till today
def get_historical_data():
    stock_data = yf.download('NVDA', start='2020-01-01', end='2025-03-07')  # End date as today (T-1)
    return stock_data['Close']

# Train ARIMA model and predict the next 5 days
def predict_next_days(stock_data):
    model = ARIMA(stock_data, order=(5,1,0))  # Example (p,d,q) parameters
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=5)  # Predicting next 5 days
    return forecast

# Simulate trading strategy based on predictions
def trading_agent(predictions, balance, shares, stock_price):
    decisions = []
    for i in range(len(predictions)):
        decision = "HOLD"
        if i == 0:
            # First day: Buy as many shares as possible
            shares_to_buy = balance // stock_price
            balance -= shares_to_buy * stock_price
            decision = f"BUY {shares_to_buy} shares"
        else:
            if predictions.iloc[i] > predictions.iloc[i-1]:  # Price increase, hold or buy
                decision = "HOLD"
            else:  # Price drop, sell
                decision = f"SELL {shares} shares"
                balance += shares * predictions.iloc[i]
                shares = 0  # Sold all shares
        decisions.append(decision)
    return decisions, balance, shares

# Running the simulation
stock_prices = get_historical_data()
predictions = predict_next_days(stock_prices)

# Assume stock price on first day of prediction is the last actual closing price
initial_stock_price = stock_prices.iloc[-1]

# Start with initial conditions
initial_balance = 10000
initial_shares = 0

# Execute trading strategy
decisions, final_balance, final_shares = trading_agent(predictions, initial_balance, initial_shares, initial_stock_price)

# Prepare results for display
results_df = pd.DataFrame({
    "Date": pd.date_range(start="2025-03-10", periods=5, freq='B'),
    "Predicted Price": predictions.values,
    "Decision": decisions
})

print(results_df)